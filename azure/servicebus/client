var http = require("http");
var tokenGenerator = require("/azure/authentication/tokengenerator");
var parser = require("/azure/util/parser");

/*const ERROR_MSGS = {
    "400": {
        code: "Remote_API_Error",
        detail: "Bad request."
    },
    "404": {
        code: "Remote_API_Error",
        detail: "Not Found."
    },
    "410": {
        code: "Invalid_Queue_Subscription",
        detail: "Specified queue or subscription does not exist."
    },
    "500": {
        code: "Internal Error",
        detail: "Bad Request."
    }
};*/

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 * @param {Object} dto : needed parameters
 *	{String} dto.resource: the name of the targeted resource. This is used to retrieve the access token.
 * 	All subsequent operations made using the current instance will target this resource
 */

function Client(dto) {  
    this.myTokenGenerator = new tokenGenerator.TokenGenerator();
}

/**
 * Invoke a given API. If response status is 401, the method will try to obtain a new access token using the 
 * current user's refresh token and retry the invocation of the target API.
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 * 	{String} params.url : the url of the targeted API
 *	{String} params.method : (optional) the http method to use when invoking the API
 *	{Object} params.headers: (optional) the http headers to send to the API
 *	{Object} params.params: (optional) the parameters that are expected by the API
 * @param {String} authData: SAS or OAuth2
 */
Client.prototype.callApi = function(params, authData) {
    try {   
        return this._callApi(params, authData);
    } catch(response) {
        console.log("callAPI " + JSON.stringify(response));
        var status = Number(response.errorCode);
        log.info("Remote service returns error with the following status " + response.errorCode)
        if (status == 401) {
            this._refreshToken(params, authData);        
            try {
                return this._callApi(params, authData);
            } catch(response) {
                this._handleError(response);
            }
        }else {
            this._handleError(response);
        }    
    }
};

/*
* Method _callApi
* @param {Object} params : expected parameters
* 	{String} params.url : the url of the targeted API
*	{String} params.method : (optional) the http method to use when invoking the API
*	{Object} params.headers: (optional) the http headers to send to the API
*	{Object} params.params: (optional) the parameters that are expected by the API
* @param {String} authData: SAS or OAuth2
* Will add brokerProperties to responseBody in case it exists, for the method unlock in the Queue and Topic class
*/
Client.prototype._callApi = function(params, authData) {

    var tokenData = this.myTokenGenerator.loadToken(authData);
    params.headers = params.headers ? params.headers : {};
    switch(authData.authMode){
        case "sas": params.headers.Authorization = "SharedAccessSignature " + tokenData.token; break;
        case "oauth2": params.headers.Authorization = "Bearer " + tokenData.token; break;
        default: params.headers.Authorization = "Bearer " + tokenData.token;
    }

    //console.log(JSON.stringify(params));
    var response = http.request(params);
    //console.log("Received following response: " + JSON.stringify(response));
    if (response.status >= "200" && response.status < "300") {
        var responseBody = response.body ? parser.parse(response.body) : "";
        var brokerProperties = response.headers.BrokerProperties;
        if (brokerProperties){
            responseBody.brokerProperties = JSON.parse(brokerProperties);
        }

        if (responseBody.message) {
            throw response;
        }else {
            return responseBody;
        }
    }else {
        throw {
            errorCode: response.status,
            errorDetail: JSON.stringify(response)
        };
    }
};

Client.prototype._refreshToken = function(params, authData) {

    var cloneParams = params ? JSON.parse(JSON.stringify(authData)) : {};
    for (var key in authData){
        cloneParams[key] = authData[key];
    }

    log.info("Refreshing token");
    this.myTokenGenerator.getSignature(cloneParams);
};

Client.prototype._handleError = function(response) {

    var errorObj = "";
    try {
        console.log(JSON.stringify(response));
        errorObj = response;
    }catch(e) {
        console.log(JSON.stringify(e));
        try {
            errorObj = JSON.parse(response);
        }catch(e) {
            errorObj = response;
        }
    };

    throw {
        "errorCode": "Invocation_Error",
        "errorDetail": errorObj.errorDetail
    };
};

/*
 * Transform all Numeric and boolean parameters to string so they can be passed to http.callApi
 * (shallow only)
 */
Client.prototype._paramsToString = function(params) {

    var newParams = {};
    for (var p in params) {

        if (typeof(params[p]) != "object") {
            newParams[p] = "" +  params[p];
        }else {
            newParams[p] = params[p];
        }
    }

    return newParams;
};			
