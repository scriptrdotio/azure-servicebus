var http = require("http");
var tokenGenerator = require("/azure/authentication/tokengenerator");

const ERROR_MSGS = {
    "400": {
        code: "Remote_API_Error",
        detail: "Bad request."
    },
    "410": {
        code: "Invalid_Queue_Subscription",
        detail: "Specified queue or subscription does not exist."
    },
    "500": {
        code: "Internal Error",
        detail: "Bad Request."
    }
};

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 * @param {Object} dto : needed parameters
 *	{String} dto.resource: the name of the targeted resource. This is used to retrieve the access token.
 * 	All subsequent operations made using the current instance will target this resource
 */

function Client(dto) {
    this.clientId = "";
    if (!dto) {
        throw {
            "errorCode": "Invalid_Parameter",
            "errorDetail": "Client - dto cannot be null or empty"
        };
    }

    if (!dto.resource) {
        throw {
            "errorCode": "Invalid_Parameter",
            "errorDetail": "Client - dto.resource cannot be null or empty. You should specify the url of the resource"
        };
    }
	var myTokenGenerator = new tokenGenerator.TokenGenerator();
    this.accessToken = myTokenGenerator.loadToken(dto.resource);
    console.log(accessToken);
}

/**
 * Invoke a given API. If response status is 401, the method will try to obtain a new access token using the 
 * current user's refresh token and retry the invocation of the target API.
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 * 	{String} params.url : the url of the targeted API
 *	{String} params.method : (optional) the http method to use when invoking the API
 *	{Object} params.headers: (optional) the http headers to send to the API
 *	{Object} params.params: (optional) the parameters that are expected by the API
 */
Client.prototype.callApi = function(params) {
    try {   
        return this._callApi(params);
    } catch(response) {

        var status = Number(response.status);
        if (status == 401) {
            this._refreshToken();        
            try {
                return this._callApi(params);
            } catch(response) {
                this._handleError(response);
            }
        }else {
            this._handleError(response);
        }    
    }
};

Client.prototype._callApi = function(params) {

    params.url = params.url;
    params.headers = {
        "Authorization": "SharedAccessSignature " + accessToken //this.tokenGenerator.getSignature(dto.resource)
    };

    console.log(JSON.stringify(params));
    var response = http.request(params);
    console.log("Received following response  : " + JSON.stringify(response));
    if (response.status >= "200" && response.status < "300") {
        var responseBody = JSON.parse(response.body);
        if (responseBody.message) {
            throw response;
        }else {
            return responseBody;
        }
    }else {
        throw {
            errorCode: ERRROR_MSGS[response.status].errorCode,
            errorDetail: ERRROR_MSGS[response.status].errorDetail
        };
    } /*
    if (response.status == "400"){
        throw {
            errorCode:"Remote_API_Error",
            errorDetail:"Bad request."
        };
    }else if (response.status == "410"){
        throw {
            errorCode:"Invalid_Queue_Subscription",
            errorDetail:"Specified queue or subscription does not exist."
        };
    }else if (response.status == "500"){
        throw {
            errorCode:"Internal_Error",
            errorDetail:"Internal Error (" +  ."
        };
    }else {
        throw response;
    }*/
};

Client.prototype._refreshToken = function(resource) {

    console.log("Refreshing token for " +  resource);
    
    var myTokenGenerator = new tokenGenerator.TokenGenerator();
    myTokenGenerator.getSignature(resource);
};

Client.prototype._handleError = function(response) {

    var errorObj = "";
    try {

        errorObj = JSON.parse(response.body);
    }catch(e) {

        try {
            errorObj = JSON.parse(response);
        }catch(e) {
            errorObj = response;
        }
    };

    throw {
        "errorCode": "Invocation_Error",
        "errorDetail": errorObj
    };
};

/*
 * Transform all Numeric and boolean parameters to string so they can be passed to http.callApi
 * (shallow only)
 */
Client.prototype._paramsToString = function(params) {

    var newParams = {};
    for (var p in params) {

        if (typeof(params[p]) != "object") {
            newParams[p] = "" +  params[p];
        }else {
            newParams[p] = params[p];
        }
    }

    return newParams;
};			
