var document = require("document");
var authmodefactoryModule = require("./authmodefactory");

/*
 * @class tokengenerator
 * @constructor
 */
function TokenGenerator(){}

/*
 * @method loadToken
 * @param {Object} [params]: expected parameters
 * @param {String} [params.resource]
 * @param {String} [params.authMode]
 * @return {Object}
 */
TokenGenerator.prototype.loadToken = function(params){
    var queryObj = {
        query: 'type = "token" and resource = "' + params.resource +  '" and authMode = "' + params.authMode + '"',
        fields: "*"
    };

    var resp = document.query(queryObj);
    if (resp.metadata.status == "failure") {
        log.error("Failed to load tokens \n " + JSON.stringify(resp));
        throw resp;
    }

    if (resp.result.documents.length == 0){
		return this.getSignature(params);
    }
    return resp.result.documents[0];
}

/*
 * @method getSignature
 * @param {Object} [params]: expected parameters
 * @param {String} [params.resource]
 * @param {String} [params.authMode]
 * @return {String} token
 */
TokenGenerator.prototype.getSignature = function(params){
    log.info("TokenGenerator.getSignature received " + JSON.stringify(params));
    var authmodefactory = new authmodefactoryModule.AuthModeFactory();
    var authenticationStrategy = authmodefactory.getAuthStrategy(params);
    var token = authenticationStrategy.generateSignature(params);

    log.warn("generating a new token for " + params.resource);
    var docParam = {
        type: "token",
        token: token.token,
        expiry: token.expiry,
        resource: params.resource,
        authMode: params.authMode ? params.authMode : "oauth2",
        "meta.types": {
            token: "text"
        }
    };

    var resp = document.save(docParam);
    if (resp.metadata.status == "failure") {
        log.error("Failed to save token \n " + JSON.stringify(resp) + "\n " + JSON.stringify(docParam));
    }
    return token;
}