var document = require("document");
var authmodefactoryModule = require("./authmodefactory");

/*
 * signature-string = SHA-256('https://<yournamespace>.servicebus.windows.net/'+'\n'+ 1438205742)
 * SharedAccessSignature sig=<signature-string>&se=<expiry>&skn=<keyName>&sr=<URL-encoded-resourceURI>
 * @function generateSignature
 * @param {Object} params: expected parameters
 * @param {Numeric} expiry in seconds e.g. 1438205742 (date in seconds). Optional, defaults to DEFAULT_EXP
 * @param {String} keyName: hask key name (actually the name of the policy). Optional, defaults to /azure/servicebus/config.policy
 * @param {String} key: the secret key to use to generate the hash. Defaults to /azure/servicebus/config.hashKey
 * @param {String} resource: the targeted resource on the service, e.g.https://<yournamespace>.servicebus.windows.net/testqueue
 */

function TokenGenerator(){}

TokenGenerator.prototype.loadToken = function(params){
    var queryObj = {

        query: 'type = "token" and resource = "' + params.resource +  '" and authMode = "' + params.authMode + '"',
        fields: "*"
    };

    var resp = document.query(queryObj);
    if (resp.metadata.status == "failure") {
        log.error("Failed to load tokens \n " + JSON.stringify(resp));
        throw resp;
    }

    if (resp.result.documents.length == 0){
        var authmodefactory = new authmodefactoryModule.AuthModeFactory();
        var authenticationStrategy = authmodefactory.getAuthStrategy(params);
        var token = authenticationStrategy.generateSignature(params);
        
        log.warn("generating a new token for " + params.resource);
        var docParam = {
            type: "token",
            token: token.token,
            expiry: token.expiry,
            resource: params.resource,
            authMode: params.authMode ? params.authMode : "oauth2",
            "meta.types": {
                token: "text"
            }
        };

        var resp = document.save(docParam);
        if (resp.metadata.status == "failure") {
            log.error("Failed to save token \n " + JSON.stringify(resp) + "\n " + JSON.stringify(docParam));
        }
        return token;
    }
    return resp.result.documents[0].token;
}
